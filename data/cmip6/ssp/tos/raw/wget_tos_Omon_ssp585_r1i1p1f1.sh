#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.llnl.gov - 2023/05/19 01:06:52
# Search URL: https://esgf-node.llnl.gov/esg-search/wget?dataset_id=CMIP6.ScenarioMIP.NUIST.NESM3.ssp585.r1i1p1f1.Omon.tos.gn.v20190731|esg.lasg.ac.cn&dataset_id=CMIP6.ScenarioMIP.CAS.FGOALS-f3-L.ssp585.r1i1p1f1.Omon.tos.gn.v20191008|esg.lasg.ac.cn&dataset_id=CMIP6.ScenarioMIP.CCCma.CanESM5.ssp585.r1i1p1f1.Omon.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.ScenarioMIP.BCC.BCC-CSM2-MR.ssp585.r1i1p1f1.Omon.tos.gn.v20190319|cmip.bcc.cma.cn&dataset_id=CMIP6.ScenarioMIP.NIMS-KMA.KACE-1-0-G.ssp585.r1i1p1f1.Omon.tos.gr.v20200130|esgf-nimscmip6.apcc21.org&dataset_id=CMIP6.ScenarioMIP.NCAR.CESM2-WACCM.ssp585.r1i1p1f1.Omon.tos.gn.v20200702|esgf-data.ucar.edu&dataset_id=CMIP6.ScenarioMIP.E3SM-Project.E3SM-1-1.ssp585.r1i1p1f1.Omon.tos.gr.v20201201|esgf-data2.llnl.gov&dataset_id=CMIP6.ScenarioMIP.CAS.FGOALS-g3.ssp585.r1i1p1f1.Omon.tos.gn.v20191229|esg.lasg.ac.cn&dataset_id=CMIP6.ScenarioMIP.E3SM-Project.E3SM-1-1-ECA.ssp585.r1i1p1f1.Omon.tos.gr.v20220325|esgf-data2.llnl.gov&dataset_id=CMIP6.ScenarioMIP.E3SM-Project.E3SM-1-0.ssp585.r1i1p1f1.Omon.tos.gr.v20220608|esgf-data2.llnl.gov&dataset_id=CMIP6.ScenarioMIP.KIOST.KIOST-ESM.ssp585.r1i1p1f1.Omon.tos.gr1.v20220204|polaris.pknu.ac.kr&dataset_id=CMIP6.ScenarioMIP.MRI.MRI-ESM2-0.ssp585.r1i1p1f1.Omon.tos.gn.v20191108|esgf-data03.diasjp.net&dataset_id=CMIP6.ScenarioMIP.THU.CIESM.ssp585.r1i1p1f1.Omon.tos.gn.v20200220|cmip.dess.tsinghua.edu.cn&dataset_id=CMIP6.ScenarioMIP.CAS.CAS-ESM2-0.ssp585.r1i1p1f1.Omon.tos.gn.v20201230|esg.lasg.ac.cn&dataset_id=CMIP6.ScenarioMIP.MIROC.MIROC6.ssp585.r1i1p1f1.Omon.tos.gn.v20190627|esgf-data02.diasjp.net&dataset_id=CMIP6.ScenarioMIP.CCCma.CanESM5-1.ssp585.r1i1p1f1.Omon.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.ScenarioMIP.CAMS.CAMS-CSM1-0.ssp585.r1i1p1f1.Omon.tos.gn.v20190708|esg.camscma.cn&dataset_id=CMIP6.ScenarioMIP.INM.INM-CM4-8.ssp585.r1i1p1f1.Omon.tos.gr1.v20190603|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.INM.INM-CM5-0.ssp585.r1i1p1f1.Omon.tos.gr1.v20190724|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.MPI-M.MPI-ESM1-2-LR.ssp585.r1i1p1f1.Omon.tos.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.FIO-QLNM.FIO-ESM-2-0.ssp585.r1i1p1f1.Omon.tos.gn.v20191227|cmip.fio.org.cn&dataset_id=CMIP6.ScenarioMIP.CCCR-IITM.IITM-ESM.ssp585.r1i1p1f1.Omon.tos.gn.v20200915|esg-cccr.tropmet.res.in&dataset_id=CMIP6.ScenarioMIP.CMCC.CMCC-CM2-SR5.ssp585.r1i1p1f1.Omon.tos.gn.v20200622|esgf-node2.cmcc.it&dataset_id=CMIP6.ScenarioMIP.CMCC.CMCC-ESM2.ssp585.r1i1p1f1.Omon.tos.gn.v20210126|esgf-node2.cmcc.it&dataset_id=CMIP6.ScenarioMIP.IPSL.IPSL-CM6A-LR.ssp585.r1i1p1f1.Omon.tos.gn.v20190903|vesg.ipsl.upmc.fr&dataset_id=CMIP6.ScenarioMIP.NCC.NorESM2-LM.ssp585.r1i1p1f1.Omon.tos.gn.v20191108|noresg.nird.sigma2.no&dataset_id=CMIP6.ScenarioMIP.NCC.NorESM2-MM.ssp585.r1i1p1f1.Omon.tos.gn.v20191108|noresg.nird.sigma2.no&dataset_id=CMIP6.ScenarioMIP.CSIRO.ACCESS-ESM1-5.ssp585.r1i1p1f1.Omon.tos.gn.v20210318|esgf.nci.org.au&dataset_id=CMIP6.ScenarioMIP.CSIRO-ARCCSS.ACCESS-CM2.ssp585.r1i1p1f1.Omon.tos.gn.v20210317|esgf.nci.org.au&dataset_id=CMIP6.ScenarioMIP.NOAA-GFDL.GFDL-ESM4.ssp585.r1i1p1f1.Omon.tos.gr.v20180701|esgdata.gfdl.noaa.gov''
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.llnl.gov/esg-search/wget?dataset_id=CMIP6.ScenarioMIP.NUIST.NESM3.ssp585.r1i1p1f1.Omon.tos.gn.v20190731|esg.lasg.ac.cn&dataset_id=CMIP6.ScenarioMIP.CAS.FGOALS-f3-L.ssp585.r1i1p1f1.Omon.tos.gn.v20191008|esg.lasg.ac.cn&dataset_id=CMIP6.ScenarioMIP.CCCma.CanESM5.ssp585.r1i1p1f1.Omon.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.ScenarioMIP.BCC.BCC-CSM2-MR.ssp585.r1i1p1f1.Omon.tos.gn.v20190319|cmip.bcc.cma.cn&dataset_id=CMIP6.ScenarioMIP.NIMS-KMA.KACE-1-0-G.ssp585.r1i1p1f1.Omon.tos.gr.v20200130|esgf-nimscmip6.apcc21.org&dataset_id=CMIP6.ScenarioMIP.NCAR.CESM2-WACCM.ssp585.r1i1p1f1.Omon.tos.gn.v20200702|esgf-data.ucar.edu&dataset_id=CMIP6.ScenarioMIP.E3SM-Project.E3SM-1-1.ssp585.r1i1p1f1.Omon.tos.gr.v20201201|esgf-data2.llnl.gov&dataset_id=CMIP6.ScenarioMIP.CAS.FGOALS-g3.ssp585.r1i1p1f1.Omon.tos.gn.v20191229|esg.lasg.ac.cn&dataset_id=CMIP6.ScenarioMIP.E3SM-Project.E3SM-1-1-ECA.ssp585.r1i1p1f1.Omon.tos.gr.v20220325|esgf-data2.llnl.gov&dataset_id=CMIP6.ScenarioMIP.E3SM-Project.E3SM-1-0.ssp585.r1i1p1f1.Omon.tos.gr.v20220608|esgf-data2.llnl.gov&dataset_id=CMIP6.ScenarioMIP.KIOST.KIOST-ESM.ssp585.r1i1p1f1.Omon.tos.gr1.v20220204|polaris.pknu.ac.kr&dataset_id=CMIP6.ScenarioMIP.MRI.MRI-ESM2-0.ssp585.r1i1p1f1.Omon.tos.gn.v20191108|esgf-data03.diasjp.net&dataset_id=CMIP6.ScenarioMIP.THU.CIESM.ssp585.r1i1p1f1.Omon.tos.gn.v20200220|cmip.dess.tsinghua.edu.cn&dataset_id=CMIP6.ScenarioMIP.CAS.CAS-ESM2-0.ssp585.r1i1p1f1.Omon.tos.gn.v20201230|esg.lasg.ac.cn&dataset_id=CMIP6.ScenarioMIP.MIROC.MIROC6.ssp585.r1i1p1f1.Omon.tos.gn.v20190627|esgf-data02.diasjp.net&dataset_id=CMIP6.ScenarioMIP.CCCma.CanESM5-1.ssp585.r1i1p1f1.Omon.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.ScenarioMIP.CAMS.CAMS-CSM1-0.ssp585.r1i1p1f1.Omon.tos.gn.v20190708|esg.camscma.cn&dataset_id=CMIP6.ScenarioMIP.INM.INM-CM4-8.ssp585.r1i1p1f1.Omon.tos.gr1.v20190603|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.INM.INM-CM5-0.ssp585.r1i1p1f1.Omon.tos.gr1.v20190724|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.MPI-M.MPI-ESM1-2-LR.ssp585.r1i1p1f1.Omon.tos.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.ScenarioMIP.FIO-QLNM.FIO-ESM-2-0.ssp585.r1i1p1f1.Omon.tos.gn.v20191227|cmip.fio.org.cn&dataset_id=CMIP6.ScenarioMIP.CCCR-IITM.IITM-ESM.ssp585.r1i1p1f1.Omon.tos.gn.v20200915|esg-cccr.tropmet.res.in&dataset_id=CMIP6.ScenarioMIP.CMCC.CMCC-CM2-SR5.ssp585.r1i1p1f1.Omon.tos.gn.v20200622|esgf-node2.cmcc.it&dataset_id=CMIP6.ScenarioMIP.CMCC.CMCC-ESM2.ssp585.r1i1p1f1.Omon.tos.gn.v20210126|esgf-node2.cmcc.it&dataset_id=CMIP6.ScenarioMIP.IPSL.IPSL-CM6A-LR.ssp585.r1i1p1f1.Omon.tos.gn.v20190903|vesg.ipsl.upmc.fr&dataset_id=CMIP6.ScenarioMIP.NCC.NorESM2-LM.ssp585.r1i1p1f1.Omon.tos.gn.v20191108|noresg.nird.sigma2.no&dataset_id=CMIP6.ScenarioMIP.NCC.NorESM2-MM.ssp585.r1i1p1f1.Omon.tos.gn.v20191108|noresg.nird.sigma2.no&dataset_id=CMIP6.ScenarioMIP.CSIRO.ACCESS-ESM1-5.ssp585.r1i1p1f1.Omon.tos.gn.v20210318|esgf.nci.org.au&dataset_id=CMIP6.ScenarioMIP.CSIRO-ARCCSS.ACCESS-CM2.ssp585.r1i1p1f1.Omon.tos.gn.v20210317|esgf.nci.org.au&dataset_id=CMIP6.ScenarioMIP.NOAA-GFDL.GFDL-ESM4.ssp585.r1i1p1f1.Omon.tos.gr.v20180701|esgdata.gfdl.noaa.gov'''

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'tos_Omon_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/ScenarioMIP/BCC/BCC-CSM2-MR/ssp585/r1i1p1f1/Omon/tos/gn/v20190319/tos_Omon_BCC-CSM2-MR_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' '28335877ad4f4d36df320931116ec97943c8e6513a262557ea75112529be679d'
'tos_Omon_CAMS-CSM1-0_ssp585_r1i1p1f1_gn_201501-209912.nc' 'http://esg.camscma.cn/thredds/fileServer/cmip6/CMIP6/ScenarioMIP/CAMS/CAMS-CSM1-0/ssp585/r1i1p1f1/Omon/tos/gn/v20190708/tos_Omon_CAMS-CSM1-0_ssp585_r1i1p1f1_gn_201501-209912.nc' 'SHA256' '08a8f05bcbab196f04acda6e2bd3ba43dddb55482016be12306b4a1d3e7b5836'
'tos_Omon_CAS-ESM2-0_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/CAS/CAS-ESM2-0/ssp585/r1i1p1f1/Omon/tos/gn/v20201230/tos_Omon_CAS-ESM2-0_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' '13636169e2c6f2db469ef1e12179ada2b181c58557aebdf0d68f7402b1821d19'
'tos_Omon_FGOALS-f3-L_ssp585_r1i1p1f1_gn_201501-206412.nc' 'http://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/CAS/FGOALS-f3-L/ssp585/r1i1p1f1/Omon/tos/gn/v20191008/tos_Omon_FGOALS-f3-L_ssp585_r1i1p1f1_gn_201501-206412.nc' 'SHA256' '8709b1bbe9028d283f14d31d5c0be5e67eac822df7c2536427c468e28594789e'
'tos_Omon_FGOALS-f3-L_ssp585_r1i1p1f1_gn_206501-210012.nc' 'http://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/CAS/FGOALS-f3-L/ssp585/r1i1p1f1/Omon/tos/gn/v20191008/tos_Omon_FGOALS-f3-L_ssp585_r1i1p1f1_gn_206501-210012.nc' 'SHA256' '530513b590b5cb15f873e60821c80d38c196f285330f13c57ae4b86ee350b243'
'tos_Omon_FGOALS-g3_ssp585_r1i1p1f1_gn_201501-206412.nc' 'http://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/CAS/FGOALS-g3/ssp585/r1i1p1f1/Omon/tos/gn/v20191229/tos_Omon_FGOALS-g3_ssp585_r1i1p1f1_gn_201501-206412.nc' 'SHA256' '262c9c68988747fe375adff47c16bbcdf09c68d7b6c2d148e963b06099430209'
'tos_Omon_FGOALS-g3_ssp585_r1i1p1f1_gn_206501-210012.nc' 'http://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/CAS/FGOALS-g3/ssp585/r1i1p1f1/Omon/tos/gn/v20191229/tos_Omon_FGOALS-g3_ssp585_r1i1p1f1_gn_206501-210012.nc' 'SHA256' 'a9ce1978bc51115f98f08cd36e90c581761e986cdb3912b00ada1b471afa193e'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_201501-201912.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_201501-201912.nc' 'SHA256' '097dbfa8ee45b525f1f4d95c748d6b8bcdde81611d7198b3385f73d27153ea66'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_202001-202412.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_202001-202412.nc' 'SHA256' 'abec606c4fc9b7bc6ae16ae09e9922b6d3996f0193bd0f397ad3218064b6e3cc'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_202501-202912.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_202501-202912.nc' 'SHA256' '36ed470a2c5877b4f92ec8cc0f514456cfff357e9c164a072c41d4571803525c'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_203001-203412.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_203001-203412.nc' 'SHA256' 'baa0b6236721b67df891c0303e367cdd7341459e8a3c931aee46debbf4888f3e'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_203501-203912.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_203501-203912.nc' 'SHA256' '0efb78f2465ffc88cfa206d7c0aebe61488b61630993199285abecdfa0b66786'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_204001-204412.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_204001-204412.nc' 'SHA256' 'ff8eac06b19d8c3c57aa944687d9f2323944656afd803555f0d16bc7eaece42f'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_204501-204912.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_204501-204912.nc' 'SHA256' 'ff371f874421e2b71e0bbeee908d26273e612f6ac3b2a17cf6aadc1ef1b60d77'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_205001-205412.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_205001-205412.nc' 'SHA256' 'aa85fae3230ae96ae9c9a888fd3e40c050dc03e7526ffa4307cfc61acdf0bc0b'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_205501-205912.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_205501-205912.nc' 'SHA256' '980a84643ff1a2f7a2d78724aee75622f01515d2d6f0981aab26d9e21737405f'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_206001-206412.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_206001-206412.nc' 'SHA256' 'c0694d8b39697d0ec740c669131e8ef8e04e9f0932cc0b45f348d88847aa7702'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_206501-206912.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_206501-206912.nc' 'SHA256' 'cd4883b2128aa97312933be71b88fa32f07311e605d02465194007871b3c3b24'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_207001-207412.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_207001-207412.nc' 'SHA256' '5b2073ee5569ec1be10e086a4e9214831dab86adb4a2ec2ac05d8a64c5038c6a'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_207501-207912.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_207501-207912.nc' 'SHA256' 'eeb7c6b32c5eaae4bb8f641a9ed6b53b04e56662ffb1e3e3656db0a154a258c6'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_208001-208412.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_208001-208412.nc' 'SHA256' '4c19de8217c03931536eef01ef98ec36abecf20bd72549826705fd5e127f5ee4'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_208501-208912.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_208501-208912.nc' 'SHA256' 'f1c5f487b5d67f424b350078a197e8f04193e57aa37494d97299ef61ccf7d569'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_209001-209412.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_209001-209412.nc' 'SHA256' 'a151040731a019af21dcfc8411321e586b51d320262a9b3b7416059361a3d5f1'
'tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_209501-209912.nc' 'http://esg-cccr.tropmet.res.in/thredds/fileServer/esg_dataroot5/SSP585/CMIP6/ScenarioMIP/CCCR-IITM/IITM-ESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200915/tos_Omon_IITM-ESM_ssp585_r1i1p1f1_gn_209501-209912.nc' 'SHA256' '33e8c8efa40b89a6e75fb9b2e990886d6163bfecd12f8fb689b4da4055283720'
'tos_Omon_CanESM5-1_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgH_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5-1/ssp585/r1i1p1f1/Omon/tos/gn/v20190429/tos_Omon_CanESM5-1_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' '9013a297edc0f17489ea3e05e554828d87cd5a28f133ae75cda45760e7c5f650'
'tos_Omon_CanESM5_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Omon/tos/gn/v20190429/tos_Omon_CanESM5_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' 'b723f9cba21026bf8ecce562cf21cce61e53c80fa4d43f90ef8b83e24865e3cb'
'tos_Omon_CanESM5_ssp585_r1i1p1f1_gn_210101-218012.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Omon/tos/gn/v20190429/tos_Omon_CanESM5_ssp585_r1i1p1f1_gn_210101-218012.nc' 'SHA256' 'faf0c5bb53c2d3d783292b5a50099744b1b06264caec299de6719513c97a1b41'
'tos_Omon_CanESM5_ssp585_r1i1p1f1_gn_218101-230012.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgD_dataroot/AR6/CMIP6/ScenarioMIP/CCCma/CanESM5/ssp585/r1i1p1f1/Omon/tos/gn/v20190429/tos_Omon_CanESM5_ssp585_r1i1p1f1_gn_218101-230012.nc' 'SHA256' '19d9213397220ad42bbba74cca4ac0ae88748d64d19c8aa8eb0581fbae7a58c2'
'tos_Omon_CMCC-CM2-SR5_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://esgf-node2.cmcc.it/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/CMCC/CMCC-CM2-SR5/ssp585/r1i1p1f1/Omon/tos/gn/v20200622/tos_Omon_CMCC-CM2-SR5_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' 'c16d69d29d4c77eb168e0e65d4c1cd89fcd20e482294fc4d9d3afeef6c01b946'
'tos_Omon_CMCC-ESM2_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://esgf-node2.cmcc.it/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/CMCC/CMCC-ESM2/ssp585/r1i1p1f1/Omon/tos/gn/v20210126/tos_Omon_CMCC-ESM2_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' '7f8ea37989e49ff7d4b02c7de372ead1400010426e31bca8dc6b971801c753f0'
'tos_Omon_ACCESS-CM2_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://esgf.nci.org.au/thredds/fileServer/master/CMIP6/ScenarioMIP/CSIRO-ARCCSS/ACCESS-CM2/ssp585/r1i1p1f1/Omon/tos/gn/v20210317/tos_Omon_ACCESS-CM2_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' 'ad9c1e5867516fce3503791d3d6e230f84d50506447cca6593f628c633657c48'
'tos_Omon_ACCESS-CM2_ssp585_r1i1p1f1_gn_210101-230012.nc' 'http://esgf.nci.org.au/thredds/fileServer/master/CMIP6/ScenarioMIP/CSIRO-ARCCSS/ACCESS-CM2/ssp585/r1i1p1f1/Omon/tos/gn/v20210317/tos_Omon_ACCESS-CM2_ssp585_r1i1p1f1_gn_210101-230012.nc' 'SHA256' 'd3bc29281c4af57d0c0383a98ebbfd7dcefe3b269f3ed4d60790dada180277c1'
'tos_Omon_ACCESS-ESM1-5_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://esgf.nci.org.au/thredds/fileServer/master/CMIP6/ScenarioMIP/CSIRO/ACCESS-ESM1-5/ssp585/r1i1p1f1/Omon/tos/gn/v20210318/tos_Omon_ACCESS-ESM1-5_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' '959f5ba4edbcb7f8ef5c920669425c3f736b7d53403943d42e6a22d84ccbf779'
'tos_Omon_ACCESS-ESM1-5_ssp585_r1i1p1f1_gn_210101-230012.nc' 'http://esgf.nci.org.au/thredds/fileServer/master/CMIP6/ScenarioMIP/CSIRO/ACCESS-ESM1-5/ssp585/r1i1p1f1/Omon/tos/gn/v20210318/tos_Omon_ACCESS-ESM1-5_ssp585_r1i1p1f1_gn_210101-230012.nc' 'SHA256' '2b4d131740cb2ee25a7637c05382d4d7184e59e5f4f9b1e8ad459cd02eca86b7'
'tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_201501-202412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-0/ssp585/r1i1p1f1/Omon/tos/gr/v20220608/tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_201501-202412.nc' 'SHA256' '83e6e947f40164be8ee131869d893fad4253adbfe339a933e3b609f612fc263c'
'tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_202501-203412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-0/ssp585/r1i1p1f1/Omon/tos/gr/v20220608/tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_202501-203412.nc' 'SHA256' 'ee0de9d0293d2fcc8597db8b5bb434188846b416f43e7f07eba67d154cc07cf6'
'tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_203501-204412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-0/ssp585/r1i1p1f1/Omon/tos/gr/v20220608/tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_203501-204412.nc' 'SHA256' '772488d5d179fb144c4ac19fe60a91c3916af3fec272b1b332ec185076d97b14'
'tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_204501-205412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-0/ssp585/r1i1p1f1/Omon/tos/gr/v20220608/tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_204501-205412.nc' 'SHA256' '2466db9a7d9948ae1ec99cdc7c7aaae0b0f918d97d02678853635e9bdd8dc379'
'tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_205501-206412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-0/ssp585/r1i1p1f1/Omon/tos/gr/v20220608/tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_205501-206412.nc' 'SHA256' '7bf1afb64de106f1152c624a41d86051775e05bbe774ea5e440d1810a921b757'
'tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_206501-207412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-0/ssp585/r1i1p1f1/Omon/tos/gr/v20220608/tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_206501-207412.nc' 'SHA256' '67ed4f5ca7b2ec3e7f928866ef620398f34f08d5281d76b19875ef9228416ee5'
'tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_207501-208412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-0/ssp585/r1i1p1f1/Omon/tos/gr/v20220608/tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_207501-208412.nc' 'SHA256' 'e2598e3c6a7880077fc8558d3933d2b7db0aaec6039e3b7adb072eb80c89ed69'
'tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_208501-209412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-0/ssp585/r1i1p1f1/Omon/tos/gr/v20220608/tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_208501-209412.nc' 'SHA256' '6b44981dd340c2d20f948b01ad6855732fd3aed3716a60cd757aefefc7d0408b'
'tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_209501-209912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-0/ssp585/r1i1p1f1/Omon/tos/gr/v20220608/tos_Omon_E3SM-1-0_ssp585_r1i1p1f1_gr_209501-209912.nc' 'SHA256' '22fd523f2885541c578bcd1dec3f6bb7a262fbd154822c84a6bd0799ca71aad3'
'tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_201501-202412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1-ECA/ssp585/r1i1p1f1/Omon/tos/gr/v20220325/tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_201501-202412.nc' 'SHA256' '4024fbc3034be475c35a9a91cfe0a752add67ced8ac3d4bf4a82a191f6f20810'
'tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_202501-203412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1-ECA/ssp585/r1i1p1f1/Omon/tos/gr/v20220325/tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_202501-203412.nc' 'SHA256' '061d004dede2dd1acc2bd7120e5914166a6bcda560ee1ad84a657bd4230458f6'
'tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_203501-204412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1-ECA/ssp585/r1i1p1f1/Omon/tos/gr/v20220325/tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_203501-204412.nc' 'SHA256' '9ed61fbbdc003785e1b2f4b03621684a48d7a3d30f9ac68a4496490d2848a451'
'tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_204501-205412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1-ECA/ssp585/r1i1p1f1/Omon/tos/gr/v20220325/tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_204501-205412.nc' 'SHA256' '66c583d6e9c99b8bc5c11b42f3dd4208eabb49c5ed84e775222bbe499cfff39c'
'tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_205501-206412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1-ECA/ssp585/r1i1p1f1/Omon/tos/gr/v20220325/tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_205501-206412.nc' 'SHA256' 'a639daf280bf98543e87e7d6159d18343d016b1909374aa25f2eef98b7a055c3'
'tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_206501-207412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1-ECA/ssp585/r1i1p1f1/Omon/tos/gr/v20220325/tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_206501-207412.nc' 'SHA256' '060b333264b792f684f2645c516fba180d3c376e60cc9e4a0d89af4d3b62dcb9'
'tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_207501-208412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1-ECA/ssp585/r1i1p1f1/Omon/tos/gr/v20220325/tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_207501-208412.nc' 'SHA256' '6807dd814d803de4d1cb5884bb775efbd59a86c20c48adae1fd3a0526ffc9acd'
'tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_208501-209412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1-ECA/ssp585/r1i1p1f1/Omon/tos/gr/v20220325/tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_208501-209412.nc' 'SHA256' 'ce6c674ecb38cb4dcd0db95d99f3e35729e2db3f6e3c79aa956af17bb57744a5'
'tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_209501-210012.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1-ECA/ssp585/r1i1p1f1/Omon/tos/gr/v20220325/tos_Omon_E3SM-1-1-ECA_ssp585_r1i1p1f1_gr_209501-210012.nc' 'SHA256' 'e6c98e10b46438746b1c7986d56a4385405cc8d7981f1134fce3924021ff444b'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_201501-201912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_201501-201912.nc' 'SHA256' '57d418fbb8d371af98b9c0dbc38198ec34949d60c2c83929fd2f24c756f1e3ff'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_202001-202412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_202001-202412.nc' 'SHA256' 'b32a90ad3b7f7942bd1b2612b7e14f0c172c59a9bbbe9ea8b965dd542c11c607'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_202501-202912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_202501-202912.nc' 'SHA256' '19bca3b5b2c2cc14d726be56209cbd92dcd5feba6605574b6d6a3c54665f1520'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_203001-203412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_203001-203412.nc' 'SHA256' '0221de57b0836a7cd46aaf0859f748e90146b206c35416a150d51537b4f5aa83'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_203501-203912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_203501-203912.nc' 'SHA256' 'b5e18e1669a7f8bb74587388cc28c9f63055ccd6610b7ea779b1a12d34dc4be7'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_204001-204412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_204001-204412.nc' 'SHA256' '268531f047e9f376b17c78ef841ab7a97053083b9be87b0e1b4cca765d6f1c57'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_204501-204912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_204501-204912.nc' 'SHA256' 'f02d1c2030b9216a82c78b54695e458657a803614e14be8cba55991ecd20a2ad'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_205001-205412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_205001-205412.nc' 'SHA256' 'aec42d57940be79154b8e9c1a46221691e216c41642b91171f0e71bec8fa00ee'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_205501-205912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_205501-205912.nc' 'SHA256' '64b00dffcd036420a52c3af4a50b1399386b6e34bb6a25dc6e6e39a24b6d5d19'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_206001-206412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_206001-206412.nc' 'SHA256' 'fc23af5987f9f2a1dbd81a1a908295d749812dbcf44bea4238e60e2ca98c2ce6'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_206501-206912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_206501-206912.nc' 'SHA256' '75119789000e5ba17070ecdfd8b64638065b85bf67b3c1e93b7f2dca6b72a47b'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_207001-207412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_207001-207412.nc' 'SHA256' '06a8c2d677d03263578e2bbbb4b45f68082bfa9643e3e422fceca1601059d090'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_207501-207912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_207501-207912.nc' 'SHA256' 'afbdfeaf9fc9f5d8410183ad31302ddfb4d20c19e3ffab7a4d569f69eabb37ac'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_208001-208412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_208001-208412.nc' 'SHA256' '5f5476c81acf6c6b3b93649d96bc39523c28ddaec8400c0be5214b15f326c160'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_208501-208912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_208501-208912.nc' 'SHA256' 'c3e44d6ae5270b2fb51de20f14071fb8a3ae5110d3e0d4a2c9a6869b17a8a8d1'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_209001-209412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_209001-209412.nc' 'SHA256' '86bea7224c17d0687b38af797548c68c8f3280850b47587fc2739584e3c5478b'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_209501-209912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_209501-209912.nc' 'SHA256' '4787254734f597bf8f15b7e3052547331d4bc0b1e212cd8d628d8d7b79195663'
'tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_210001-210012.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/ScenarioMIP/E3SM-Project/E3SM-1-1/ssp585/r1i1p1f1/Omon/tos/gr/v20201201/tos_Omon_E3SM-1-1_ssp585_r1i1p1f1_gr_210001-210012.nc' 'SHA256' 'e8a9d204fb35ade4f581de2acab9f1fc90c201f33ff73511711af4d40d5350d8'
'tos_Omon_FIO-ESM-2-0_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://cmip.fio.org.cn/thredds/fileServer/esg_dataroot/cmip6/CMIP6/ScenarioMIP/FIO-QLNM/FIO-ESM-2-0/ssp585/r1i1p1f1/Omon/tos/gn/v20191227/tos_Omon_FIO-ESM-2-0_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' '0910330167cfcbb2cb69a03700e110fe65a60366c3e96bbdc99074ab91e55e82'
'tos_Omon_INM-CM4-8_ssp585_r1i1p1f1_gr1_201501-206412.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/INM/INM-CM4-8/ssp585/r1i1p1f1/Omon/tos/gr1/v20190603/tos_Omon_INM-CM4-8_ssp585_r1i1p1f1_gr1_201501-206412.nc' 'SHA256' 'ba5aeb043b55c7e1e62d3a359576a7a463b09aa02c4afe11c49aefc90b71a821'
'tos_Omon_INM-CM4-8_ssp585_r1i1p1f1_gr1_206501-210012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/INM/INM-CM4-8/ssp585/r1i1p1f1/Omon/tos/gr1/v20190603/tos_Omon_INM-CM4-8_ssp585_r1i1p1f1_gr1_206501-210012.nc' 'SHA256' 'a0d1cf113f47d7e760aa21699ae960a5f0106c072c1b4eaaacd85ad4addecbc2'
'tos_Omon_INM-CM5-0_ssp585_r1i1p1f1_gr1_201501-206412.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/INM/INM-CM5-0/ssp585/r1i1p1f1/Omon/tos/gr1/v20190724/tos_Omon_INM-CM5-0_ssp585_r1i1p1f1_gr1_201501-206412.nc' 'SHA256' '484d1b52b46c4b8ad818da3ae66121e968f1cc2a130f8442cd8fcd971df2ff73'
'tos_Omon_INM-CM5-0_ssp585_r1i1p1f1_gr1_206501-210012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/INM/INM-CM5-0/ssp585/r1i1p1f1/Omon/tos/gr1/v20190724/tos_Omon_INM-CM5-0_ssp585_r1i1p1f1_gr1_206501-210012.nc' 'SHA256' 'a646da9a13b1e6752ce741445e93ea9f6b0a98b89a355a74a1455950819c0df0'
'tos_Omon_IPSL-CM6A-LR_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip6/ScenarioMIP/IPSL/IPSL-CM6A-LR/ssp585/r1i1p1f1/Omon/tos/gn/v20190903/tos_Omon_IPSL-CM6A-LR_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' 'dd307f4cdf4a3c4f8e32153b6ebe2e08ec57171b8e143d62c296df56207224ff'
'tos_Omon_IPSL-CM6A-LR_ssp585_r1i1p1f1_gn_210101-230012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip6/ScenarioMIP/IPSL/IPSL-CM6A-LR/ssp585/r1i1p1f1/Omon/tos/gn/v20190903/tos_Omon_IPSL-CM6A-LR_ssp585_r1i1p1f1_gn_210101-230012.nc' 'SHA256' '748e35dd8f5f63fab35f3c337546a7252d20d25cd622b3c77d617b847fdbfb6c'
'tos_Omon_KIOST-ESM_ssp585_r1i1p1f1_gr1_201501-210012.nc' 'http://polaris.pknu.ac.kr/thredds/fileServer/cmip6/CMIP6/ScenarioMIP/KIOST/KIOST-ESM/ssp585/r1i1p1f1/Omon/tos/gr1/v20220204/tos_Omon_KIOST-ESM_ssp585_r1i1p1f1_gr1_201501-210012.nc' 'SHA256' '65668fda903e3e96d84e5f3b46714fd60b07e8f5b202fbad262830414f86cf90'
'tos_Omon_MIROC6_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MIROC/MIROC6/ssp585/r1i1p1f1/Omon/tos/gn/v20190627/tos_Omon_MIROC6_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' '19c1c46e6237c259a5658eec97c6e1c7d656e38d349a06dd109044e29458c230'
'tos_Omon_MPI-ESM1-2-LR_ssp585_r1i1p1f1_gn_201501-203412.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/MPI-M/MPI-ESM1-2-LR/ssp585/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_ssp585_r1i1p1f1_gn_201501-203412.nc' 'SHA256' 'e1d1efb5ec140b9ab183a99cb413f89aeefc88bf3ea862c6478a5d48aafbc296'
'tos_Omon_MPI-ESM1-2-LR_ssp585_r1i1p1f1_gn_203501-205412.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/MPI-M/MPI-ESM1-2-LR/ssp585/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_ssp585_r1i1p1f1_gn_203501-205412.nc' 'SHA256' 'd372535ade87b03f02c71d24159e41edf8014314072fc6be7d71ece63799fd89'
'tos_Omon_MPI-ESM1-2-LR_ssp585_r1i1p1f1_gn_205501-207412.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/MPI-M/MPI-ESM1-2-LR/ssp585/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_ssp585_r1i1p1f1_gn_205501-207412.nc' 'SHA256' '36f3734920ccdc1b2df257e08844011a522f0d88c786e8982f82239a95810f58'
'tos_Omon_MPI-ESM1-2-LR_ssp585_r1i1p1f1_gn_207501-209412.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/MPI-M/MPI-ESM1-2-LR/ssp585/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_ssp585_r1i1p1f1_gn_207501-209412.nc' 'SHA256' 'd9adff428ba342375e9b16e22fd8652735d91e311d38d6d27d82c3051e6468e7'
'tos_Omon_MPI-ESM1-2-LR_ssp585_r1i1p1f1_gn_209501-210012.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/ScenarioMIP/MPI-M/MPI-ESM1-2-LR/ssp585/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_ssp585_r1i1p1f1_gn_209501-210012.nc' 'SHA256' '9e94276cafa56783cb9d8c6b7e254028ea3e1de03a40e06f64c67ae899a13bfc'
'tos_Omon_MRI-ESM2-0_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_MRI-ESM2-0_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' '26c198f49d836bb24eff02a491606f272e69a7df48937ac57ba9a43f99e3a230'
'tos_Omon_MRI-ESM2-0_ssp585_r1i1p1f1_gn_210101-230012.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/MRI/MRI-ESM2-0/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_MRI-ESM2-0_ssp585_r1i1p1f1_gn_210101-230012.nc' 'SHA256' '4849b56718522486b5390b3bad30b9e642079c8ae686c81fae3c5f017de4c3d9'
'tos_Omon_CESM2-WACCM_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/NCAR/CESM2-WACCM/ssp585/r1i1p1f1/Omon/tos/gn/v20200702/tos_Omon_CESM2-WACCM_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' 'c73ebf137c9a1c2bbc392cc483708e04820848ca4dfc030b2a366e57567d9ff7'
'tos_Omon_CESM2-WACCM_ssp585_r1i1p1f1_gn_210101-215012.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/NCAR/CESM2-WACCM/ssp585/r1i1p1f1/Omon/tos/gn/v20200702/tos_Omon_CESM2-WACCM_ssp585_r1i1p1f1_gn_210101-215012.nc' 'SHA256' '42dc7ec603c3e6f90a37b153e1b487df478d3bf79b453933dc3ec361400e1d78'
'tos_Omon_CESM2-WACCM_ssp585_r1i1p1f1_gn_215101-220012.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/NCAR/CESM2-WACCM/ssp585/r1i1p1f1/Omon/tos/gn/v20200702/tos_Omon_CESM2-WACCM_ssp585_r1i1p1f1_gn_215101-220012.nc' 'SHA256' 'ea45fb50e1bb9d741b75c053d78d4386c43cd608a5256bc88c8c6084f01c6d6e'
'tos_Omon_CESM2-WACCM_ssp585_r1i1p1f1_gn_220101-225012.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/NCAR/CESM2-WACCM/ssp585/r1i1p1f1/Omon/tos/gn/v20200702/tos_Omon_CESM2-WACCM_ssp585_r1i1p1f1_gn_220101-225012.nc' 'SHA256' '457b3b314ac101f74e3f43a8e5805f5561df863b20146f3b74f69a9732b85240'
'tos_Omon_CESM2-WACCM_ssp585_r1i1p1f1_gn_225101-229912.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/NCAR/CESM2-WACCM/ssp585/r1i1p1f1/Omon/tos/gn/v20200702/tos_Omon_CESM2-WACCM_ssp585_r1i1p1f1_gn_225101-229912.nc' 'SHA256' 'de4266e200317e3ac0c37bf85968c524a5c7d221327fd5ca19557df0cfa86804'
'tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_201501-202012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-LM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_201501-202012.nc' 'SHA256' '8e205ce77a96adb6a82677d20bf322a1ee0ef3b10fcd0d2c527cc9f22059189a'
'tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_202101-203012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-LM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_202101-203012.nc' 'SHA256' '843b47838d03b2ed09a8ebb31905ae95c6ae93b10d15ac4efd18af09a975a88a'
'tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_203101-204012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-LM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_203101-204012.nc' 'SHA256' '9a6a5d1ad9b9e77a776fda2686d9c32033c2a00dc97774bc2556616e3d64f64f'
'tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_204101-205012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-LM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_204101-205012.nc' 'SHA256' 'c28defec63feead4ae1d43d58fc8afbc8f52c36240459b9dfe4f370270f86b65'
'tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_205101-206012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-LM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_205101-206012.nc' 'SHA256' '475dd44b9270299a669187f4ebee2bc347966508edcd0d42fb9cfbf31eeca2d6'
'tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_206101-207012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-LM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_206101-207012.nc' 'SHA256' 'bf50342648a85d58b1484279867d72ae78800f57d39b671df766fc4d56f4b84f'
'tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_207101-208012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-LM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_207101-208012.nc' 'SHA256' 'fba308fa1af0b8a77b239b299dd0884fbecbd3e767af32be490218f58f3e2bbe'
'tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_208101-209012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-LM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_208101-209012.nc' 'SHA256' 'e8d573f495ff2c79662321f4b565797b7b0c90be39cf3fd65d03dfb70feb6177'
'tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_209101-210012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-LM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-LM_ssp585_r1i1p1f1_gn_209101-210012.nc' 'SHA256' '2603fe0bf966b72ace18d05e4ef29bca729352cd1906217e7560f5b734b88a70'
'tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_201501-202012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-MM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_201501-202012.nc' 'SHA256' 'd38ca9c88c25f8e8246b74a19d7ed8207dc8c8fa9be7d7056496b063cba28ca3'
'tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_202101-203012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-MM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_202101-203012.nc' 'SHA256' '6dbadda346fd91acb4e8c1d5f2bf042258696aaf0c8e8f4a30956df1b7b3f568'
'tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_203101-204012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-MM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_203101-204012.nc' 'SHA256' '326f8964f5ba0430921551e0efceaee1e05e6536e680b19c4cb663bd943fe228'
'tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_204101-205012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-MM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_204101-205012.nc' 'SHA256' '5e81557973feec587ae6964e9a3b5d5965c6d3414ee8dd754674ddfd2fb5251e'
'tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_205101-206012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-MM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_205101-206012.nc' 'SHA256' '057c81ed0fe436d8117ed9d61c848c6951c070ef772215cd1380f8ddeefd716d'
'tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_206101-207012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-MM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_206101-207012.nc' 'SHA256' 'cfad0db668c061bd0117f38d819a316847cf3aaf080474a94cede409d5080b37'
'tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_207101-208012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-MM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_207101-208012.nc' 'SHA256' 'fc2b5288dcb24fb4a92bdea3c622f9ac2b7f138b3fdd4ec7bcf531c5febc5b7c'
'tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_208101-209012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-MM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_208101-209012.nc' 'SHA256' '03ab4d975097245e48d35f83799212f93d920bfce17d4dcf7a0c5e51b3cd3853'
'tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_209101-210012.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/ScenarioMIP/NCC/NorESM2-MM/ssp585/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_ssp585_r1i1p1f1_gn_209101-210012.nc' 'SHA256' '7ea602da2df44cc7422f507ba7faeb109338d5ae2cb74f381179999da13019b4'
'tos_Omon_KACE-1-0-G_ssp585_r1i1p1f1_gr_201501-210012.nc' 'http://esgf-nimscmip6.apcc21.org/thredds/fileServer/my_cmip6_dataroot/ScenarioMIP/ssp585/R1/aa008z-Omon/CMIP6/ScenarioMIP/NIMS-KMA/KACE-1-0-G/ssp585/r1i1p1f1/Omon/tos/gr/v20200130/tos_Omon_KACE-1-0-G_ssp585_r1i1p1f1_gr_201501-210012.nc' 'SHA256' '73711e7b77b5c77c1fe88e68659aff6ed8d52b3adf7ee4464b72c92167326112'
'tos_Omon_NESM3_ssp585_r1i1p1f1_gn_201501-210012.nc' 'http://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/ScenarioMIP/NUIST/NESM3/ssp585/r1i1p1f1/Omon/tos/gn/v20190731/tos_Omon_NESM3_ssp585_r1i1p1f1_gn_201501-210012.nc' 'SHA256' '972ee7a708bc0e34eb98e493ab7b0378060b44d2b5833f63f6aeee234507e111'
'tos_Omon_CIESM_ssp585_r1i1p1f1_gn_201501-206412.nc' 'https://cmip.dess.tsinghua.edu.cn/thredds/fileServer/esg_dataroot/esg/DRS/ocn/CMIP6/ScenarioMIP/THU/CIESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200220/tos_Omon_CIESM_ssp585_r1i1p1f1_gn_201501-206412.nc' 'SHA256' 'cf133be6eccc2a56c502578c41b519561a4ccb4bf276fba365d3601ec0b6efba'
'tos_Omon_CIESM_ssp585_r1i1p1f1_gn_206501-210012.nc' 'https://cmip.dess.tsinghua.edu.cn/thredds/fileServer/esg_dataroot/esg/DRS/ocn/CMIP6/ScenarioMIP/THU/CIESM/ssp585/r1i1p1f1/Omon/tos/gn/v20200220/tos_Omon_CIESM_ssp585_r1i1p1f1_gn_206501-210012.nc' 'SHA256' '8263596aa8342d4343aaa099d8ea200928428681b9af0977820ad354ed9312f1'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 113 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
